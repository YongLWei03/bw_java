### log4j.rootLogger = level,appenderName1,appenderName2, .....
log4j.rootLogger = INFO,consoleAppender,logfile

### 输出信息到控制台 ###
log4j.appender.consoleAppender = org.apache.log4j.ConsoleAppender
### 直接输出，不进行缓存
log4j.appender.consoleAppender.Target = System.out
log4j.appender.consoleAppender.layout = org.apache.log4j.PatternLayout
log4j.appender.consoleAppender.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [ %p ]  %m%n


### 输出到文件
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.logfile = org.apache.log4j.RollingFileAppender
log4j.appender.logfile.Threshold = INFO
log4j.appender.logfile.File = ..//logs/maxtunnel-log.txt
log4j.appender.logfile.Append = true
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）PatternLayout
log4j.appender.logfile.layout = org.apache.log4j.PatternLayout
#一个 log 文件的大小，超过这个大小就又会生成 1 个日志 # KB ，MB，GB
log4j.appender.logfile.MaxFileSize = 10MB
log4j.appender.logfile.MaxBackupIndex = 20
log4j.appender.logfile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [ %p ]  %m%n

